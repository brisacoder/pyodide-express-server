name: Build and Deploy to AWS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install uv (Python package manager)
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Install Node.js dependencies
      run: npm ci
      
    - name: Setup Python environment with uv
      run: |
        uv sync
        
    - name: Create required directories
      run: |
        mkdir -p uploads logs plots/matplotlib plots/seaborn plots/base64
        
    - name: Start server in background
      run: |
        npm start &
        sleep 20  # Wait for server initialization
        
    - name: Run Python tests
      run: |
        uv run python run_simple_tests.py
        
    - name: Run comprehensive tests (if main branch)
      if: github.ref == 'refs/heads/main'
      run: |
        uv run python run_comprehensive_tests.py
        
    - name: Run linting
      run: |
        npm run lint
        uv run flake8 tests/ --statistics
        
  build-docker:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub (optional)
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: pyodide-express-server:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker container
      run: |
        docker run -d --name test-container -p 3000:3000 pyodide-express-server:latest
        sleep 30
        curl -f http://localhost:3000/health || exit 1
        docker stop test-container
        docker rm test-container
        
  deploy-staging:
    needs: [test, build-docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to AWS Staging
      run: |
        echo "Deploying to AWS staging environment"
        # Add your AWS deployment commands here
        # Example: aws ecs update-service --cluster staging --service pyodide-server
        
  deploy-production:
    needs: [test, build-docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to AWS Production
      run: |
        echo "Deploying to AWS production environment"
        # Add your AWS deployment commands here
        # Example: aws ecs update-service --cluster production --service pyodide-server
